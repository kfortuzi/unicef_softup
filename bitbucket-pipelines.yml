image: node:18

options:
max-time: 10

definitions:
  caches:
    api-node:
      path: nest-rest-api/node_modules
    ui-node:
      path: react-app/node_modules
  services:
    docker:
      memory: 4096

install-dep-api: &install-dep-api
  step:
    name: Install api dependencies
    script:
      - cd nest-rest-api
      - npm i
    caches:
      - api-node

install-dep-ui: &install-dep-ui
  step:
    name: Install ui dependencies
    script:
      - cd react-app
      - npm i
    caches:
      - ui-node

build-api: &build-api
  step:
    name: Build api
    script:
      - cd nest-rest-api
      - npm run prisma:generate
      - npm run build
    caches:
      - api-node

deploy-api-infrastructure-dev: &deploy-api-infrastructure-dev
  step:
    name: Deploy api infrastructure Dev
    image: atlassian/pipelines-awscli:1.29.35
    script:
      - cd nest-rest-api/infrastructure
      - ENVIRONMENT=dev ./deploy.sh

deploy-api-infrastructure-prod: &deploy-api-infrastructure-prod
  step:
    name: Deploy api infrastructure
    trigger: manual
    image: atlassian/pipelines-awscli:1.29.35
    script:
      - cd nest-rest-api/infrastructure
      - ENVIRONMENT=prod ./deploy.sh

build-api-and-push-to-ecr-dev: &build-api-and-push-to-ecr-dev
  step:
    name: Build docker image for api and deploy to AWS ECR
    caches:
      - docker
    services:
      - docker
    size: 2x
    script:
      - cd nest-rest-api
      - docker build --target production -t akpa-ai-repository-dev:latest .
      - pipe: atlassian/aws-ecr-push-image:2.2.0
        variables:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          IMAGE_NAME: akpa-ai-repository-dev

build-migrations-and-push-to-ecr-dev: &build-migrations-and-push-to-ecr-dev
  step:
    name: Build docker image for migrations and deploy to AWS ECR
    caches:
      - docker
    services:
      - docker
    size: 2x
    script:
      - cd nest-rest-api
      - docker build -f Dockerfile.prisma.migrate -t akpa-ai-db-migration-repository-dev:latest .
      - pipe: atlassian/aws-ecr-push-image:2.2.0
        variables:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          IMAGE_NAME: akpa-ai-db-migration-repository-dev

build-strapi-and-push-to-ecr-dev: &build-strapi-and-push-to-ecr-dev
  step:
    name: Build docker image for Strapi and deploy to AWS ECR
    caches:
      - docker
    services:
      - docker
    size: 2x
    script:
      - cd asset-api
      # The name should match exactly to the ECR repository value // check the stack file // the accepted suffix is dev and prod
      - docker build -t akpa-ai-strapi-repository-dev:latest .
      - pipe: atlassian/aws-ecr-push-image:2.2.0
        variables:
          AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
          AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          IMAGE_NAME: akpa-ai-strapi-repository-dev

deploy-to-ec2-dev: &deploy-to-ec2-dev
  step:
    name: Deploy to AWS EC2 dev
    size: 2x
    image: atlassian/pipelines-awscli:1.29.35
    script:
      - cd nest-rest-api/deployment
      - ENVIRONMENT=dev ./env.sh
      - echo "{\"BITBUCKET_COMMIT\":\"$BITBUCKET_COMMIT\",\"BITBUCKET_BUILD_NUMBER\":\"$BITBUCKET_BUILD_NUMBER\"}" > ./deployment.json
      - pipe: atlassian/scp-deploy:1.4.1
        variables:
          USER: ubuntu
          SERVER: $SERVER_IP_DEV
          REMOTE_PATH: "/home/ubuntu/"
          LOCAL_PATH: "${BITBUCKET_CLONE_DIR}/nest-rest-api/deployment"
          SSH_KEY: $SSH_KEY_DEV
          EXTRA_ARGS: ["-o", "StrictHostKeyChecking=no"]
      - pipe: atlassian/ssh-run:0.7.1
        variables:
          SSH_USER: ubuntu
          SERVER: $SERVER_IP_DEV
          SSH_KEY: $SSH_KEY_DEV
          MODE: script
          COMMAND: "${BITBUCKET_CLONE_DIR}/nest-rest-api/deployment/migrate.sh"
          ENV_VARS: >-
            ENVIRONMENT=dev
      - pipe: atlassian/ssh-run:0.7.1
        variables:
          SSH_USER: ubuntu
          SERVER: $SERVER_IP_DEV
          SSH_KEY: $SSH_KEY_DEV
          MODE: script
          COMMAND: "${BITBUCKET_CLONE_DIR}/nest-rest-api/deployment/spinup-docker-compose.sh"
          ENV_VARS: >-
            ENVIRONMENT=dev

test-api: &test-api
  step:
    name: Test api
    script:
      - cd nest-rest-api
      - npm test
    caches:
      - api-node

test-ui: &test-ui
  step:
    name: Test ui
    script:
      - cd react-app
      - npm test
    caches:
      - ui-node

deploy-frontend-infrastructure-dev: &deploy-frontend-infrastructure-dev
  step:
    name: Deploy Frontend infrastructure Dev
    image: atlassian/pipelines-awscli:1.29.35
    script:
      - cd react-app/infrastructure
      - ENVIRONMENT=dev ./deploy.sh

frontend-build-dev: &frontend-build-dev
  step:
    name: Run Frontend Build Dev
    caches:
      - ui-node
    script:
      - cd react-app
      - npm run build:dev
    artifacts:
      - react-app/dist/**

publish-frontend-dev: &publish-frontend-dev
  step:
    name: Publish Frontend In S3
    image: atlassian/pipelines-awscli:1.29.35
    script:
      - cd react-app/infrastructure
      - ENVIRONMENT=dev ./publish.sh

pipelines:
  pull-requests:
    "feature/api/*":
      - <<: *install-dep-api
      - <<: *build-api
    "feature/ui/*":
      - <<: *install-dep-ui
      - <<: *test-ui

  branches:
    master:
      - parallel:
          - <<: *install-dep-api
          - <<: *install-dep-ui
      - parallel:
          - <<: *deploy-api-infrastructure-dev
          - <<: *deploy-frontend-infrastructure-dev
      - parallel:
          - <<: *build-api-and-push-to-ecr-dev
          - <<: *build-migrations-and-push-to-ecr-dev
          - <<: *build-strapi-and-push-to-ecr-dev
      - <<: *deploy-to-ec2-dev
      - <<: *frontend-build-dev
      - <<: *publish-frontend-dev
