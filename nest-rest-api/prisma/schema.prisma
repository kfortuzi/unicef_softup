generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                    String                  @id @default(cuid())
  email                 String                  @unique
  firstName             String?                 @map("first_name")
  lastName              String?                 @map("last_name")
  password              String
  phoneNumber           String?                 @map("phone_number")
  profession            String?
  profilePicture        String?                 @map("profile_picture")
  birthdayDate          DateTime?               @db.Date
  hobbies               String?
  createdAt             DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime?               @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt             DateTime?               @map("deleted_at") @db.Timestamp(6)
  cover_letters         cover_letters[]
  prompts               prompts[]
  resumes               resumes[]
  userCode              user_code[]
  user_recommended_jobs user_recommended_jobs[]
  user_skills           user_skills[]
  wizard_answer         wizard_answer[]
}

model user_skills {
  id     String @id @default(cuid())
  userId String @map("user_id")
  name   String
  user   users  @relation(fields: [userId], references: [id])
}

model resumes {
  id              String          @id @default(cuid())
  userId          String          @map("user_id")
  email           String
  firstName       String?         @map("first_name")
  lastName        String?         @map("last_name")
  profilePicture  String?         @map("profile_picture")
  nationality     String?
  linkedinUrl     String?         @map("linkedin_url")
  location        String?
  phoneNumber     String?         @map("phone_number")
  summary         String?
  experiences     Json?
  languages       Json?
  certificates    Json?
  volunteering    Json?
  publications    Json?
  drivingLicense  DrivingLicense? @map("driving_license")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?       @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt       DateTime?       @map("deleted_at") @db.Timestamp(6)
  educations      Json?
  referenceId     String?
  digitalSkills   String[]        @default([]) @map("digital_skills")
  softSkills      String[]        @default([]) @map("soft_skills")
  technicalSkills String[]        @default([]) @map("technical_skills")
  hobbies         String[]        @default([])
  job             jobs?           @relation(fields: [referenceId], references: [id])
  user            users           @relation(fields: [userId], references: [id])
}

model cover_letters {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  to             String
  company        String
  companyAddress String?   @map("company_address")
  content        String?
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(6)
  referenceId    String?
  job            jobs?     @relation(fields: [referenceId], references: [id])
  user           users     @relation(fields: [userId], references: [id])
}

model jobs {
  id                       String                  @id @default(cuid())
  title                    String
  description              String?
  address                  String?
  location                 String
  type                     JobType?
  tags                     String?
  company                  String?
  companyLogo              String?                 @map("company_logo")
  createdAt                DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  contractDuration         Int?                    @map("contract_duration")
  suitableForDisabilities  Boolean?                @map("suitable_for_disabilities")
  vacantPositions          Int?                    @map("vacant_positions")
  basicSkills              String?                 @map("basic_skills")
  communicationSkill       Boolean?                @map("communication_skill")
  computerSkills           String?                 @map("computer_skills")
  dateEnd                  DateTime                @map("date_end")
  dateStart                DateTime                @map("date_start")
  deletedAt                DateTime?               @map("deleted_at") @db.Timestamp(6)
  educationType            EducationType?          @map("education_type")
  experience               String?
  foreignLanguage          String?                 @map("foreign_language")
  isUnvailable             Boolean?
  needDrivingLicense       Boolean?                @map("need_driving_license")
  paymentLevel             String?                 @map("payment_level")
  skillLines               String?                 @map("skill_lines")
  skills                   String?
  specializations          String?
  tips                     String?
  commonInterviewQuestions String?                 @map("common_interview_questions")
  updatedAt                DateTime?               @updatedAt @map("updated_at") @db.Timestamp(6)
  referenceId              Int                     @map("reference_id")
  cover_letters            cover_letters[]
  resumes                  resumes[]
  user_recommended_jobs    user_recommended_jobs[]
}

model user_recommended_jobs {
  userId String @map("user_id")
  jobId  String @map("job_id")
  job    jobs   @relation(fields: [jobId], references: [id])
  user   users  @relation(fields: [userId], references: [id])

  @@id([userId, jobId])
}

model prompts {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  endedAt        DateTime @default(now()) @map("ended_at")
  prompResponse  String?  @map("promp_response")
  promptRequest  String   @map("prompt_request")
  promptType     String   @map("prompt_type")
  firstChatbotConversationMessage Boolean @map("first_chatbot_conversation_message") @default(false)
  requireHistory Boolean  @default(false) @map("require_history")
  startedAt      DateTime @default(now()) @map("started_at")
  user           users    @relation(fields: [userId], references: [id])

  @@map("prompts")
}

model wizard_answer {
  id        String     @id @default(cuid())
  text      Json
  source    SourceType
  userId    String     @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?  @updatedAt @map("updated_at") @db.Timestamp(6)
  user      users      @relation(fields: [userId], references: [id])
}

model user_code {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  code        String
  type        CodeType
  expiresAt   DateTime  @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  confirmedAt DateTime? @map("confirmed_at") @db.Timestamp(6)
  user        users     @relation(fields: [userId], references: [id])
}

enum DrivingLicense {
  AM
  A1
  A2
  A
  B1
  BE
  C1
  C1E
  C
  CE
  D1
  D1E
  D
  DE
}

enum SourceType {
  Resume
  CoverLetter
}

enum JobType {
  FullTime
  PartTime
  Contract
}

enum EducationType {
  HighSchool
  Bachelor
  Master
  PhD
}

enum CodeType {
  VERIFICATION
  PASSWORD_RESET
}
