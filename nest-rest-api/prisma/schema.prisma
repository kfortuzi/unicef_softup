generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String?   @map("first_name")
  lastName         String?   @map("last_name")
  password         String
  verificationCode String?   @map("verification_code")
  confirmedAt      DateTime? @db.Timestamp(6)
  phoneNumber      String?   @map("phone_number")
  profession       String?
  profilePicture   String?   @map("profile_picture")
  birthdayDate     DateTime? @db.Date
  hobbies          String?
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)

  resumes               resumes[]
  cover_letters         cover_letters[]
  user_skills           user_skills[]
  user_recommended_jobs user_recommended_jobs[]
  prompts               prompts[]
  wizard_answer         wizard_answer[]
}

model user_skills {
  id     String @id @default(cuid())
  userId String @map("user_id")
  name   String

  user users @relation(fields: [userId], references: [id])
}

enum DrivingLicense {
  AM
  A1
  A2
  A
  B1
  BE
  C1
  C1E
  C
  CE
  D1
  D1E
  D
  DE
}

enum SourceType {
  Resume
  CoverLetter
}

model resumes {
  id             String          @id @default(cuid())
  userId         String          @map("user_id")
  email          String
  firstName      String?         @map("first_name")
  lastName       String?         @map("last_name")
  profilePicture String?         @map("profile_picture")
  nationality    String?
  linkedinUrl    String?         @map("linkedin_url")
  location       String?
  phoneNumber    String?         @map("phone_number")
  summary        String?
  educations     Json?
  experiences    Json?
  languages      Json?
  digitalSkills  String?         @map("digital_skills")
  softSkills     String?         @map("soft_skills")
  hobbies        String?
  certificates   Json?
  volunteering   Json?
  publications   Json?
  drivingLicense DrivingLicense? @map("driving_license")
  referenceId    String?
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime?       @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime?       @map("deleted_at") @db.Timestamp(6)

  user users @relation(fields: [userId], references: [id])
  job  jobs? @relation(fields: [referenceId], references: [id])
}

model cover_letters {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  to             String
  company        String
  companyAddress String?   @map("company_address")
  content        String?
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamp(6)
  user           users     @relation(fields: [userId], references: [id])
}

enum JobType {
  FullTime
  PartTime
  Contract
}

enum EducationType {
  HighSchool
  Bachelor
  Master
  PhD
}

model jobs {
  id                      String                  @id @default(cuid())
  referenceId             Int                     @map("reference_id")
  dateStart               DateTime                @map("date_start")
  dateEnd                 DateTime                @map("date_end")
  title                   String
  description             String?
  address                 String?
  location                String
  type                    JobType?
  contractDuration        Int?                    @map("contract_duration")
  tags                    String?
  company                 String?
  vacantPositions         Int?                    @map("vacant_positions")
  companyLogo             String?                 @map("company_logo")
  basicSkills             String?                 @map("basic_skills")
  communicationSkill      Boolean?                @map("communication_skill")
  computerSkills          String?                 @map("computer_skills")
  foreignLanguage         String?                 @map("foreign_language")
  experience              String?
  skills                  String?
  specializations         String?
  skillLines              String?                 @map("skill_lines")
  educationType           EducationType?          @map("education_type")
  paymentLevel            String?                 @map("payment_level")
  suitableForDisabilities Boolean?                @map("suitable_for_disabilities")
  needDrivingLicense      Boolean?                @map("need_driving_license")
  createdAt               DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt               DateTime?               @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt               DateTime?               @map("deleted_at") @db.Timestamp(6)
  isUnvailable            Boolean?
  user_recommended_jobs   user_recommended_jobs[]
  resumes                 resumes[]
}

model user_recommended_jobs {
  userId String @map("user_id")
  jobId  String @map("job_id")

  user users @relation(fields: [userId], references: [id])
  job  jobs  @relation(fields: [jobId], references: [id])

  @@id([userId, jobId])
}

model prompts {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  promptType     String   @map("prompt_type")
  requireHistory Boolean  @default(false) @map("require_history")
  promptRequest  String   @map("prompt_request")
  prompResponse  String?  @map("promp_response")
  startedAt      DateTime @default(now()) @map("started_at")
  endedAt        DateTime @default(now()) @map("ended_at")
  user           users    @relation(fields: [userId], references: [id])

  @@map("prompts")
}

model wizard_answer {
  id        String     @id @default(cuid())
  text      Json
  source    SourceType
  userId    String     @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime?  @updatedAt @map("updated_at") @db.Timestamp(6)
  user      users      @relation(fields: [userId], references: [id])
}
